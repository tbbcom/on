/*! Blogger Sitemap — thebukitbesi.com | Vanilla JS, responsive, pagination */
(function(){
  "use strict";

  // Config
  const CFG = Object.assign({
    perPage: 24,
    pagination: 'numbers', // 'numbers' | 'load-more'
    labelNavLimit: 20,
    excerptLength: 160,
    thumbWidth: 480,
    fallbackThumb: 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="640" height="360" viewBox="0 0 640 360"%3E%3Crect width="640" height="360" fill="%23f0f0f0"/%3E%3Ctext x="50%25" y="50%25" text-anchor="middle" dy=".3em" fill="%23999" font-family="sans-serif" font-size="18"%3ENo Image%3C/text%3E%3C/svg%3E'
  }, window.SitemapConfig || {});

  // State
  const state = {
    mode: 'recent',     // 'recent' | 'label'
    label: null,
    page: 1,
    total: 0,           // total results for current view
    items: [],
    labels: [],         // [{name,countGuess}]
    labelTotals: new Map(), // name -> total results (accurate)
    loading: false
  };

  // DOM
  const elNav = document.getElementById('recentpostnavfeed');
  const elOut = document.getElementById('recentpostsae');
  if (!elNav || !elOut) return;

  // JSONP helper
  function jsonp(url, cb){
    const cbName = '__smap_cb_' + Math.random().toString(36).slice(2);
    const s = document.createElement('script');
    const sep = url.includes('?') ? '&' : '?';
    s.src = url + (url.includes('alt=json-in-script') ? '' : sep + 'alt=json-in-script') + '&callback=' + cbName;
    s.async = true;
    const done = (err, data) => { try { delete window[cbName]; } catch(_){} try { s.remove(); } catch(_){} cb(err, data); };
    window[cbName] = (data) => done(null, data);
    s.onerror = () => done(new Error('Feed load error'));
    document.head.appendChild(s);
    setTimeout(() => { if (window[cbName]) done(new Error('Timeout')); }, 15000);
  }

  // Helpers
  function labelPath(label){ return '/feeds/posts/summary/-/' + encodeURIComponent(label); }
  function recentPath(){ return '/feeds/posts/summary'; }
  function startIndexFor(page){ return (page - 1) * CFG.perPage + 1; }
  function esc(t){ const m = {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;','/':'&#x2F;'}; return String(t).replace(/[&<>"'/]/g, x=>m[x]); }
  function dateText(d){ if (!d) return ''; const mo=['Jan','Feb','Mac','Apr','Mei','Jun','Jul','Ogos','Sep','Okt','Nov','Dis']; return `${d.getDate()} ${mo[d.getMonth()]} ${d.getFullYear()}`; }

  function iconForLabel(name){
    const key=(name||'').toLowerCase();
    const lut={resepi:'🍔',travel:'✈️',teknologi:'💻',komputer:'🖥️',birthday:'🎉',islamik:'🕌',islam:'🕋',kurier:'🚚',review:'⭐',kesihatan:'💪',direktori:'📌',pendidikan:'📚',berita:'📰',hiburan:'🎬',lokasi:'📍',masakan:'🍳',tutorial:'💡','bantuan kewangan':'💰','bantuan kerajaan':'🇲🇾','tempat menarik':'🏞️',keluarga:'👨‍👩‍👧‍👦',sukan:'⚽',permainan:'🎮',muzik:'🎵',filem:'🎥',buku:'📖',sejarah:'🏛️',sains:'🔬','bukit besi':'🌿'};
    if (lut[key]) return lut[key];
    for (const k in lut){ if (k.includes(key)||key.includes(k)) return lut[k]; }
    return '📝';
  }

  function adaptBloggerThumb(url){
    if (/blogspot\.com|googleusercontent\.com/.test(url)){
      const h = Math.round(CFG.thumbWidth * 9 / 16);
      return url.replace(/\/s\d+(-c)?(-[a-z]+)?\//, `/w${CFG.thumbWidth}-h${h}-c/`);
    }
    return url;
  }
  function detectThumb(e, html){
    if (e['media$thumbnail']?.url) return adaptBloggerThumb(e['media$thumbnail'].url);
    const m = (html||'').match(/<img[^>]+(?:src|data-src)=["']([^"']+)["']/i);
    if (m && m[1]) return adaptBloggerThumb(m[1]);
    const yt = (html||'').match(/(?:youtube\.com\/embed\/|youtu\.be\/)([A-Za-z0-9_-]{11})/);
    if (yt) return `https://i.ytimg.com/vi/${yt[1]}/hqdefault.jpg`;
    return CFG.fallbackThumb;
  }
  function toExcerpt(html, max){
    const clean = (html||'')
      .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,'')
      .replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi,'')
      .replace(/<[^>]+>/g, ' ').replace(/\s+/g, ' ').trim();
    return clean.length > max ? (clean.slice(0, max).trim() + '...') : clean;
  }

  // Load labels (top N by frequency of recent 300)
  function loadLabels(){
    jsonp('/feeds/posts/summary?max-results=300', (err, data) => {
      const entries = data?.feed?.entry || [];
      const map = new Map();
      entries.forEach(e => (e.category||[]).forEach(c => map.set(c.term, (map.get(c.term)||0)+1)));
      const labels = Array.from(map.entries()).sort((a,b)=>b[1]-a[1]).slice(0, CFG.labelNavLimit).map(([name,count])=>({name,count}));
      state.labels = labels;
      renderNav(labels);
      // Fetch accurate totals (All + labels), then render All
      fetchTotal(recentPath(), (total) => { state.total = total; updateAllButton(total); });
      labels.forEach(l => fetchTotal(labelPath(l.name), (tot)=>{ state.labelTotals.set(l.name, tot); updateLabelButton(l.name, tot); }));
      // First view
      state.mode = 'recent'; state.label = null; state.page = 1;
      loadPage(true);
    });
  }

  function fetchTotal(path, cb){
    jsonp(path + (path.includes('?') ? '&' : '?') + 'max-results=1', (err, data) => {
      const tot = parseInt(data?.feed?.['openSearch$totalResults']?.$t || '0', 10);
      cb(tot);
    });
  }

  // Render label nav
  function renderNav(labels){
    const nav = document.createElement('nav');
    nav.className = 'label-nav';
    nav.setAttribute('role','navigation');
    nav.setAttribute('aria-label','Sitemap labels');

    const allBtn = makeLabelBtn('📋 Semua Post', null, true);
    allBtn.classList.add('active');
    nav.appendChild(allBtn);

    labels.forEach(l => {
      const emoji = iconForLabel(l.name);
      const btn = makeLabelBtn(`${emoji} ${l.name}`, l.name, false);
      nav.appendChild(btn);
    });

    elNav.innerHTML = '';
    elNav.appendChild(nav);
  }

  function makeLabelBtn(text, label, isAll){
    const b = document.createElement('button');
    b.className = 'label-btn' + (isAll ? ' all' : '');
    b.type = 'button';
    b.textContent = text; // count will be appended later
    b.dataset.type = isAll ? 'all' : 'label';
    if (label) b.dataset.label = label;
    b.setAttribute('aria-pressed', String(isAll));
    b.addEventListener('click', () => {
      elNav.querySelectorAll('.label-btn').forEach(x => { x.classList.remove('active'); x.setAttribute('aria-pressed','false'); });
      b.classList.add('active'); b.setAttribute('aria-pressed','true');
      state.mode = isAll ? 'recent' : 'label';
      state.label = isAll ? null : label;
      state.page = 1;
      loadPage(true);
    });
    return b;
  }
  function updateAllButton(total){
    const btn = elNav.querySelector('.label-btn.all');
    if (btn) btn.textContent = `📋 Semua Post (${total})`;
  }
  function updateLabelButton(name, total){
    const btn = elNav.querySelector(`.label-btn[data-label="${CSS.escape(name)}"]`);
    if (btn) {
      const emoji = iconForLabel(name);
      btn.textContent = `${emoji} ${name} (${total})`;
    }
  }

  // Load a page for current view
  function loadPage(initial){
    if (state.loading) return;
    state.loading = true;
    renderLoading(initial);

    const idx = startIndexFor(state.page);
    const base = (state.mode === 'recent') ? recentPath() : labelPath(state.label);
    const url = `${base}?orderby=published&max-results=${CFG.perPage}&start-index=${idx}`;

    jsonp(url, (err, data) => {
      state.loading = false;
      if (err) { renderError('Gagal memuatkan pos. Cuba lagi.'); return; }

      const entries = data?.feed?.entry || [];
      const items = entries.map(e => {
        const title = e.title?.$t || '';
        const link = (e.link || []).find(l => l.rel === 'alternate')?.href || '';
        const published = e.published?.$t ? new Date(e.published.$t) : null;
        const updated = e.updated?.$t ? new Date(e.updated.$t) : published;
        const author = e.author?.[0]?.name?.$t || 'Admin';
        const html = e.content?.$t || e.summary?.$t || '';
        const thumb = detectThumb(e, html);
        const excerpt = toExcerpt(html, CFG.excerptLength);
        const labels = (e.category||[]).map(c => c.term);
        return { title, link, published, updated, author, thumb, excerpt, labels };
      });

      state.items = items;

      // Total results (authoritative)
      const total = parseInt(data?.feed?.['openSearch$totalResults']?.$t || '0', 10);
      state.total = total;

      renderList();
      updateJSONLD();

      // Scroll to top of list on page change
      if (!initial) {
        const top = elOut.getBoundingClientRect().top + window.scrollY - 16;
        window.scrollTo({ top, behavior: 'smooth' });
      }
    });
  }

  // Renders
  function renderLoading(initial){
    if (initial) {
      elOut.innerHTML = `
        <div class="sitemap-title">📋 Menyusun pos...</div>
        <div class="spinner" role="status" aria-label="Loading"></div>
      `;
    } else {
      const pag = elOut.querySelector('.pagination, .actions');
      if (pag) pag.innerHTML = `<div class="spinner" role="status" aria-label="Loading"></div>`;
    }
  }
  function renderError(msg){
    elOut.innerHTML = `
      <div class="error">
        <p style="font-size:20px;margin:0 0 6px">⚠️ Ralat</p>
        <p style="margin:0 0 10px">${esc(msg||'Gagal memuatkan kandungan')}</p>
        <div class="actions"><button class="btn retry" type="button">Cuba semula</button></div>
      </div>
    `;
    const b = elOut.querySelector('.retry');
    if (b) b.addEventListener('click', ()=> loadPage(true));
  }

  function titleWithCount(){
    const isAll = state.mode === 'recent';
    const name = isAll ? 'Semua Post Terkini' : state.label;
    const total = isAll ? state.total : (state.labelTotals.get(state.label) || state.total || 0);
    return `${iconForLabel(name)} ${esc(name)}${total ? ' ('+ total +')' : ''}`;
  }

  function renderList(){
    const title = titleWithCount();
    const grid = state.items.map(it => {
      const iso = it.published ? it.published.toISOString() : '';
      return `
        <article class="card" itemscope itemtype="https://schema.org/BlogPosting">
          <a class="thumb" href="${esc(it.link)}" aria-label="Baca ${esc(it.title)}" rel="bookmark" itemprop="url">
            <img src="${esc(it.thumb)}" alt="${esc(it.title)}" loading="lazy" decoding="async" width="${CFG.thumbWidth}" height="${Math.round(CFG.thumbWidth*9/16)}" itemprop="image">
          </a>
          <div class="content">
            <h3 class="title" itemprop="headline"><a href="${esc(it.link)}">${esc(it.title)}</a></h3>
            ${it.excerpt ? `<p class="excerpt" itemprop="description">${esc(it.excerpt)}</p>` : ``}
            <div class="meta">
              <time datetime="${iso}" itemprop="datePublished">${dateText(it.published)}</time>
              <a class="read-more" href="${esc(it.link)}" aria-label="Baca lagi tentang ${esc(it.title)}">Baca lagi →</a>
            </div>
          </div>
        </article>
      `;
    }).join('');

    let controls = '';
    if (CFG.pagination === 'numbers') {
      const totalPages = Math.max(1, Math.ceil(state.total / CFG.perPage));
      controls = renderPagination(totalPages);
    } else {
      const hasMore = state.page * CFG.perPage < state.total;
      controls = `
        <div class="actions">
          ${hasMore ? `<button class="btn more" type="button">Muatkan lagi</button>` : ``}
        </div>`;
    }

    elOut.innerHTML = `
      <div class="sitemap-title">${title}</div>
      ${state.items.length ? `<div class="posts-grid">${grid}</div>` : `<div class="empty">Tiada pos ditemui.</div>`}
      ${controls}
    `;

    // Events
    if (CFG.pagination === 'numbers') {
      elOut.querySelectorAll('.page-btn[data-page]').forEach(btn => {
        btn.addEventListener('click', () => {
          const p = parseInt(btn.getAttribute('data-page'), 10);
          if (!isNaN(p) && p !== state.page) { state.page = p; loadPage(); }
        });
      });
      const prev = elOut.querySelector('.page-btn.prev');
      const next = elOut.querySelector('.page-btn.next');
      prev?.addEventListener('click', () => { if (state.page > 1){ state.page--; loadPage(); }});
      next?.addEventListener('click', () => {
        const totalPages = Math.max(1, Math.ceil(state.total / CFG.perPage));
        if (state.page < totalPages){ state.page++; loadPage(); }
      });
    } else {
      const more = elOut.querySelector('.btn.more');
      if (more) more.addEventListener('click', () => { state.page++; loadPage(); });
    }

    // Fallback thumb
    elOut.querySelectorAll('img').forEach(img => {
      img.addEventListener('error', () => { if (img.src !== CFG.fallbackThumb) img.src = CFG.fallbackThumb; });
    });
  }

  function renderPagination(totalPages){
    const cur = state.page;
    const windowSize = 7;
    let start = Math.max(1, cur - Math.floor(windowSize/2));
    let end = start + windowSize - 1;
    if (end > totalPages){ end = totalPages; start = Math.max(1, end - windowSize + 1); }

    const pageBtn = (p, text=p, cls='') => `<button class="page-btn ${cls} ${p===cur?'active':''}" data-page="${p}" type="button">${text}</button>`;
    const dots = `<span class="page-btn" style="pointer-events:none;opacity:.6">…</span>`;

    let nums = '';
    if (start > 1){ nums += pageBtn(1, '1'); if (start > 2) nums += dots; }
    for (let p=start; p<=end; p++) nums += pageBtn(p);
    if (end < totalPages){ if (end < totalPages-1) nums += dots; nums += pageBtn(totalPages, String(totalPages)); }

    return `
      <div class="pagination" role="navigation" aria-label="Pagination">
        <button class="page-btn prev" type="button" ${cur===1?'disabled':''} aria-label="Sebelumnya">‹</button>
        ${nums}
        <button class="page-btn next" type="button" ${cur===totalPages?'disabled':''} aria-label="Seterusnya">›</button>
      </div>
    `;
  }

  // JSON-LD for current view
  function updateJSONLD(){
    const id = 'sitemap-jsonld';
    const first = state.items.slice(0, 20);
    const list = first.map((it,i)=>({ '@type':'ListItem', position:i+1, url: it.link }));
    const schema = {
      '@context': 'https://schema.org',
      '@type': 'CollectionPage',
      name: (state.mode==='recent'?'Sitemap: Semua Post':'Sitemap: '+state.label) + ' - The Bukit Besi Blog',
      url: location.href,
      inLanguage: document.documentElement.lang || 'ms-MY',
      isPartOf: {
        '@type': 'WebSite',
        url: location.origin,
        name: 'The Bukit Besi',
        potentialAction: {
          '@type': 'SearchAction',
          target: location.origin + '/search?q={search_term_string}',
          'query-input': 'required name=search_term_string'
        }
      },
      mainEntity: {
        '@type': 'ItemList',
        itemListOrder: 'http://schema.org/ItemListOrderAscending',
        numberOfItems: first.length,
        itemListElement: list
      }
    };
    let tag = document.getElementById(id);
    if (!tag) {
      tag = document.createElement('script');
      tag.type = 'application/ld+json';
      tag.id = id;
      document.head.appendChild(tag);
    }
    tag.textContent = JSON.stringify(schema);
  }

  // Start
  loadLabels();

  // Optional API
  window.BloggerSitemap = {
    refresh(){
      state.mode = 'recent'; state.label = null; state.page = 1; loadPage(true);
    }
  };
})();