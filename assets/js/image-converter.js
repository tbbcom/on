// const dropArea = document.getElementById('dropArea'); const fileInput = document.getElementById('fileInput'); const formatSelect = document.getElementById('formatSelect'); const convertBtn = document.getElementById('convertBtn'); const output = document.getElementById('output'); let files = []; ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => { dropArea.addEventListener(eventName, preventDefaults, false); }); function preventDefaults(e) { e.preventDefault(); e.stopPropagation(); } ['dragenter', 'dragover'].forEach(eventName => { dropArea.addEventListener(eventName, highlight, false); }); ['dragleave', 'drop'].forEach(eventName => { dropArea.addEventListener(eventName, unhighlight, false); }); function highlight() { dropArea.classList.add('highlight'); } function unhighlight() { dropArea.classList.remove('highlight'); } dropArea.addEventListener('drop', handleDrop, false); function handleDrop(e) { const dt = e.dataTransfer; addFiles([...dt.files]); } dropArea.addEventListener('click', () => fileInput.click()); fileInput.addEventListener('change', () => { addFiles([...fileInput.files]); fileInput.value = ''; // Reset for re-selection of same file }); document.addEventListener('paste', (e) => { if (e.clipboardData && e.clipboardData.items) { const items = Array.from(e.clipboardData.items) .filter(item => item.type.startsWith('image/')) .map(item => item.getAsFile()); if(items.length > 0) { addFiles(items); } } }); function addFiles(newFiles) { const imageFiles = newFiles.filter(f => f.type.startsWith('image/')); files.push(...imageFiles); updateFileList(); } function updateFileList() { if (files.length > 0) { output.innerHTML = `<p style="text-align:center; font-weight:bold;"><strong>${files.length}</strong> image(s) ready for conversion.</p>`; } else { output.innerHTML = ''; } } convertBtn.addEventListener('click', () => { if (files.length === 0) { alert('Please add one or more images to convert.'); return; } const outputFormat = formatSelect.value; const extension = outputFormat.split('/')[1]; const convertedBlobs = []; output.innerHTML = '<p>Converting... Please wait.</p>'; let processedCount = 0; files.forEach((file) => { const reader = new FileReader(); reader.onload = (e) => { const img = new Image(); img.onload = () => { const canvas = document.createElement('canvas'); canvas.width = img.width; canvas.height = img.height; const ctx = canvas.getContext('2d'); ctx.drawImage(img, 0, 0); canvas.toBlob((blob) => { const url = URL.createObjectURL(blob); const fileName = file.name.replace(/\.[^/.]+$/, "") + '.' + extension; convertedBlobs.push({ blob, url, fileName }); processedCount++; if (processedCount === files.length) { renderDownloadLinks(convertedBlobs, extension); files = []; // Clear files after conversion } }, outputFormat, 0.95); }; img.onerror = () => { console.error("Error loading image:", file.name); processedCount++; if (processedCount === files.length) { renderDownloadLinks(convertedBlobs, extension); } }; img.src = e.target.result; }; reader.readAsDataURL(file); }); }); function renderDownloadLinks(blobs, extension) { output.innerHTML = `<h4>Conversion Complete!</h4>`; if (blobs.length > 1) { // Dynamic import of jszip for better performance import('https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js').then(module => { const JSZip = module.default; const zip = new JSZip(); blobs.forEach(({ blob, fileName }) => { zip.file(fileName, blob); }); zip.generateAsync({ type: "blob" }).then(content => { const url = URL.createObjectURL(content); const a = document.createElement('a'); a.href = url; a.download = 'converted_images.zip'; a.className = 'zip-download'; a.textContent = '⬇️ Download All as ZIP'; output.appendChild(a); }); }); } blobs.forEach(({ url, fileName }) => { const itemDiv = document.createElement('div'); itemDiv.className = 'output-item'; itemDiv.innerHTML = `<span>${fileName}</span><a href="${url}" download="${fileName}">Download</a>`; output.appendChild(itemDiv); }); } document.querySelectorAll('.faq-question').forEach(btn => { btn.addEventListener('click', () => { const item = btn.parentNode; const wasActive = item.classList.contains('active'); document.querySelectorAll('.faq-item').forEach(i => i.classList.remove('active')); // Optional: close others if (!wasActive) { item.classList.add('active'); } // Update all icons document.querySelectorAll('.faq-question span').forEach(span => span.textContent = '+'); if (!wasActive) { btn.querySelector('span').textContent = '−'; } }); });
